[ {l i}
  $l len {n}
  [$i 0 < $i $n >= |]
  [ [$i  0  <] [$i $n + {i}] if
    [$i $n >=] [$i $n - {i}] if
  ] while
  $l $i @
] 'over-at-flow define

[{l i d} $l len {n} [$i 0 < $i $n >= |] [$d] [$l $i @] if-else] 'over-at-default define

[ {t}
  $t 0 @ $t 1 @ $t 2 @ {o w t}
  $o 4 * $w 2 * $t 1 * + +
] 'triplet-to-decimal define

[ {n} [$n 1 >= $n 4 <= &] [1] [0] if-else ] 'rule-decimal-to-binary define

[ triplet-to-decimal rule-decimal-to-binary ] 'rule-triplet-to-binary define

[[{i} [$i 0 ==] [" " prin] ["X" prin] if-else] each "" print] 'print-seed define

[ {p}
  [ ] {r}
  $p len {n}
  0 $n range
  [ {i}
    []
    $p $i 1 - 0 over-at-default <-
    $p $i     0 over-at-default <-
    $p $i 1 + 0 over-at-default <-
    rule-triplet-to-binary
    $r swap <- {r}
  ] each
  $r
] 'get-next-iter define

[ {w t}
  [] {s}
  0 $w range
  [ {i}
    [$w $i - 2 ==] [1] [0] if-else
    $s swap <- {s}
  ] each
  0 $t range
  [ {_}
    $s print-seed
    $s get-next-iter {s}
  ] each
] 'do-rule define

